
1.	Make a single library loader object to be created and passed on to other objects (shared pointer)
	Contains at least a mode and a data vector (both public)
	mode indicates if a library is being used
	this is to reduce load times and memory usage /*done*/

2.	rewrite all other objects to use the new library object and it's mode /*done*/

3.	make root factorization funtionallity (form: [exp]root([number])), where if exp is not existant it is 2

4.	optimize large library loading

n.	make ui:
	*only for windows (c# allows full .NET4)
		-language options include:
			C#(would need to rewriteand recompile c++ to function as a DLL)
			XAML
			JS(nope)
			C++(mfc?atl?)
	*different screens per calculation type(change the screen,no popup)
	*after a calculation gives shows 3 options in the same window as the results:
		-save the result in a file
		-do another of the same type erasing results
		-return to the first screen
	*user should be able to exit from any screen
	*have a credits top button
	*have a help top button

n+1.polish ui:
	*add dark mode/theme option
	*top select button
	*add calculation time in lower bar(is going to be nigh in impossible to get even somewhat accurate)
	*button sounds?...maybe? (can be really annoying though, include option to mute)
	*polish code
	*maybe also optimize backend?
